# -*- coding: utf-8 -*-
"""sudoku

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ThJXRcN72p2zfXju37xdpzoUQ2ayIf7j
"""

import numpy as np

sudoku =  [[0,0,2,0,1,8,9,0,5], [6,0,0,2,0,0,0,8,0], [3,0,0,0,4,7,0,6,1], [9,0,0,0,8,1,7,0,0], [0,2,0,0,0,0,0,4,0], [0,0,4,5,3,0,0,0,6], [8,9,0,1,7,0,0,0,3], [0,6,0,0,0,5,0,0,4], [1,0,3,8,2,0,5,0,0]]

print (np.array(sudoku))


def prazdne (sudoku):
  for r in range(len(sudoku)):
    for s in range (len(sudoku[0])):
      if sudoku[r][s] == 0:   
        return r,s  
  return None


def reseni (sudoku):
  nula = prazdne(sudoku)
  if not nula:
    return True
  else:
    radek, sloupec = nula
  for cislo in range(1,10):
    if mozne (sudoku, cislo, radek, sloupec):
      sudoku [radek][sloupec] = cislo
      if reseni (sudoku):
        return True
      sudoku [radek][sloupec] = 0
  return False


def mozne(sudoku, cislo, r,s):
    # radek
    for i in range(len(sudoku[0])):
        if sudoku[(r,s)[0]][i] == cislo: 
            return False

    # sloupec
    for i in range(len(sudoku)):
        if sudoku[i][(r,s)[1]] == cislo: 
            return False

    # ctverec
    cx = ((r,s)[1] // 3)*3
    cy = ((r,s)[0] // 3)*3

    for i in range(cy, cy + 3):
        for j in range(cx, cx + 3):
            if sudoku[i][j] == cislo: 
                return False
    return True

    
print("....................")

reseni (sudoku)
print (np.array(sudoku))

